{"version":3,"file":"static/js/296.95410c8f.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/preprocess.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-factory-space/index.js"],"sourcesContent":["/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}"],"names":["normalizeIdentifier","value","replace","toLowerCase","toUpperCase","blankLine","partial","tokenize","effects","ok","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","decodeNumericCharacterReference","base","Number","parseInt","String","fromCodePoint","hasOwnProperty","combineExtensions","extensions","all","index","length","syntaxExtension","extension","hook","left","call","undefined","right","constructs","Array","isArray","existing","list","before","add","push","splice","start","remove","items","end","parameters","chunkStart","from","unshift","slice","resolveAll","events","context","called","resolve","includes","characterEscapeOrReference","decodeString","decode","$0","$1","$2","charCodeAt","head","hex","decodeNamedCharacterReference","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","SpliceBuffer","constructor","initial","this","get","RangeError","shift","setCursor","pop","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","count","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","type","_tokenizer","_isInFirstContentOfListItem","contentType","Object","assign","subcontent","_container","_objectSpread","eventIndex","token","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","line","content","contentStart","attempt","contentInitial","consume","enter","exit","lineStart","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","point","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","size","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","text","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","_bufferIndex","_index","column","thematicBreak","name","marker","sequence","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","state","open","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","info","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","characterEscape","lineEnding","labelEnd","newEvents","close","media","_inactive","_balanced","group","label","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","classifyCharacter","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","result","atTab","join","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","search","own","fromMarkdown","encoding","options","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","children","tokenStack","resume","listStack","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","node","errorHandler","onExitError","Error","stringifyPosition","toString","expectingFirstListItemValue","lang","flowCodeInside","title","url","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","fragment","alt","characterReferenceType","ordered","spread","checked","compiler","postprocess","settings","defaultConstructs","parse","atCarriageReturn","match","endPosition","TextDecoder","lastIndex","exec","ceil","preprocess","d","combined","key","remarkParse","doc","emptyOptions","one","includeImageAlt","includeHtml","values","pos","element","createElement","innerHTML","character","textContent","prefix"],"sourceRoot":""}