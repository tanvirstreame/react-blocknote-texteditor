{"version":3,"file":"static/js/558.f1e65a25.chunk.js","mappings":"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","sources":["../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/ccount/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/devlop/lib/default.js","../node_modules/micromark-factory-space/index.js"],"sourcesContent":["/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}"],"names":["normalizeIdentifier","value","replace","toLowerCase","toUpperCase","blankLine","partial","tokenize","effects","ok","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","hasOwnProperty","combineExtensions","extensions","all","index","length","syntaxExtension","extension","hook","left","call","undefined","right","constructs","Array","isArray","existing","list","before","add","push","splice","start","remove","items","end","parameters","chunkStart","from","unshift","slice","findAndReplace","tree","options","settings","ignored","convert","ignore","pairs","tupleOrList","result","TypeError","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","node","parents","grandparent","parent","siblings","children","indexOf","find","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","type","global","handler","RegExp","string","escape","inConstruct","notInConstruct","enterLiteralAutolink","token","this","enter","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","exitLiteralAutolinkHttp","exit","exitLiteralAutolinkWww","data","assert","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","prefix","previous","test","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","ccount","closingParens","splitUrl","atext","label","email","charCodeAt","unicodeWhitespace","unicodePunctuation","enterFootnoteCallString","buffer","enterFootnoteCall","identifier","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","resume","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","footnoteReference","state","info","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","handlers","footnoteDefinition","shift","indentLines","containerFlow","current","mapAll","mapExceptFirst","unsafe","character","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","_objectSpread","defaultStringLength","serialize","String","toAlignment","codePointAt","enterTable","align","_align","map","d","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","atBreak","inlineCode","defaultHandlers","includes","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","size","Math","max","repeat","lines","delimiterStart","delimiterEnd","join","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","offset","column","Object","assign","listItemWithTaskListItem","checkable","checkbox","listItem","wwwPrefix","wwwPrefixInside","consume","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","domainAfter","domainAtPunctuation","markdownLineEndingOrSpace","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","asciiAlpha","trailCharacterReferenceInside","emailDomainDotTrail","asciiAlphanumeric","wwwAutolink","name","self","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","text","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","resolveToPotentialGfmFootnoteCall","context","marker","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","classifyCharacter","_open","Boolean","_close","resolveAll","open","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","constructor","editMap","at","addImplementation","sort","a","b","vecs","pop","element","gfmTableAlign","inDelimiterRow","event","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","document","continuation","resolveTo","flow","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","paragraph","delete","gfmToMarkdown","source","count","called","resolve","limit","Number","POSITIVE_INFINITY"],"sourceRoot":""}